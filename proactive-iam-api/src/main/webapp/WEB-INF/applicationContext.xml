<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:util="http://www.springframework.org/schema/util"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
	http://www.springframework.org/schema/beans/spring-beans-4.2.xsd
	http://www.springframework.org/schema/util
	http://www.springframework.org/schema/util/spring-util.xsd
	http://www.springframework.org/schema/context
	http://www.springframework.org/schema/context/spring-context-4.2.xsd">

    <context:component-scan base-package="org.ow2.proactive.iam"/>

    <bean id="authcStrategy" class="org.apache.shiro.authc.pam.FirstSuccessfulStrategy"/>

    <bean id="permissionResolver" class="org.apache.shiro.authz.permission.WildcardPermissionResolver"/>

    <bean id="authenticatorModular" class="org.apache.shiro.authc.pam.ModularRealmAuthenticator">
        <property name="authenticationStrategy" ref="authcStrategy"/>
    </bean>

    <bean id="authorizerModular" class="org.apache.shiro.authz.ModularRealmAuthorizer">
        <property name="permissionResolver"><null/></property>
        <property name="rolePermissionResolver"><null/></property>
    </bean>

    <bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">
        <property name="authenticator" ref="authenticatorModular"/>
        <property name="authorizer" ref="authorizerModular"/>
        <property name="realms">
            <list>
                <ref bean="iniRealm"/>
                <ref bean="ldapRealm"/>
                <ref bean="pamRealm"/>
            </list>
        </property>

        <!-- By default the servlet container sessions will be used.  Uncomment this line
             to use shiro's native sessions (see the JavaDoc for more): -->
        <property name="sessionMode" value="native"/>
    </bean>

    <bean id="iniRealm" class="org.apache.shiro.realm.text.IniRealm">
        <property name="resourcePath" value="classpath:shiro.ini"/>
        <property name="permissionResolver" ref="permissionResolver"/>
    </bean>

    <!--<bean id="ldapRealm" class="org.apache.shiro.realm.activedirectory.ActiveDirectoryRealm">-->
    <!--<bean id="ldapRealm" class="org.apache.shiro.realm.ldap.DefaultLdapRealm">-->
    <bean id="ldapRealm" class="org.ow2.proactive.iam.realms.LdapRealm">
        <property name="userDnTemplate" value="cn={0},ou=users,dc=activeeon,dc=com"/>
        <property name="contextFactory" ref="ldapContextFactory" />
        <property name="searchBase" value="dc=activeeon,dc=com"/>
        <property name="principalSuffix" value=""/>
        <property name="groupRolesMap">
            <map>
                <entry key="cn=admin,ou=groups,dc=activeeon,dc=com" value="adminldap"/>
                <entry key="cn=user,ou=groups,dc=activeeon,dc=com" value="userldap"/>
            </map>
        </property>
        <property name="searchFilter" value="(&amp;(objectClass=*)(cn={0}))"/>
    </bean>

    <bean id="pamRealm" class="org.ow2.proactive.iam.realms.PamRealm">
        <property name="service" value="passwd"/>
    </bean>

    <bean id="ldapContextFactory" class="org.apache.shiro.realm.ldap.JndiLdapContextFactory">
        <!--<property name="url" value="ldap://192.168.1.136:389"/>-->
        <property name="url" value="ldaps://192.168.1.136:636"/>
        <property name="authenticationMechanism" value="simple"/>
        <!-- If necessary, customize context with JNDI environment parameters -->
        <!--
        <property name="environment">
            <map>
                <entry key="java.naming.factory.initial" value="com.sun.jndi.ldap.LdapCtxFactory"/>
                <entry key="java.naming.security.authentication" value="simple"/>
                <entry key="java.naming.provider.url" value="ldap://192.168.1.136:636"/>
                <entry key="java.naming.security.protocol" value="ssl"/>
            </map>
        </property>
        -->
    </bean>
    <!--
    <bean id="contextFactory" class="org.apache.shiro.realm.ldap.DefaultLdapContextFactory">
        <property name="url" value="ldap://192.168.1.136:389"/>
        <property name="authentication" value="simple"/>
    </bean>
    -->

    <bean id="shiroFilter" class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">
        <property name="securityManager" ref="securityManager"/>
        <!-- override these for application-specific URLs if you like:-->
        <property name="loginUrl" value="/login"/>
        <property name="successUrl" value="/home"/>
        <property name="unauthorizedUrl" value="/unauthorized"/>
        <!-- The 'filters' property is not necessary since any declared javax.servlet.Filter bean  -->
        <!-- defined will be automatically acquired and available via its beanName in chain        -->
        <!-- definitions, but you can perform instance overrides or name aliases here if you like: -->
        <!-- <property name="filters">
            <util:map>
                <entry key="anAlias" value-ref="someFilter"/>
            </util:map>
        </property> -->
        <property name="filterChainDefinitions">
            <value>
                #/docs/** = authc, perms[document:read]
                /admin = authc, roles[adminfile], roles[adminldap], roles[adminpam]
                /home = authc
                /login = anon
                /index = anon
            </value>
        </property>
    </bean>

    <!-- Define any javax.servlet.Filter beans you want anywhere in this application context.   -->
    <!-- They will automatically be acquired by the 'shiroFilter' bean above and made available -->
    <!-- to the 'filterChainDefinitions' property.  Or you can manually/explicitly add them     -->
    <!-- to the shiroFilter's 'filters' Map if desired. See its JavaDoc for more details.
    <bean id="someFilter" class="..."/>
    <bean id="anotherFilter" class="..."> ... </bean> -->

    <bean id="lifecycleBeanPostProcessor" class="org.apache.shiro.spring.LifecycleBeanPostProcessor"/>

    <!-- Enable Shiro Annotations for Spring-configured beans.  Only run after -->
    <!-- the lifecycleBeanProcessor has run: -->
    <bean class="org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator" depends-on="lifecycleBeanPostProcessor"/>
    <bean class="org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor">
        <property name="securityManager" ref="securityManager"/>
    </bean>

    <!-- Secure Spring remoting:  Ensure any Spring Remoting method invocations -->
    <!-- can be associated with a Subject for security checks.
    <bean id="secureRemoteInvocationExecutor" class="org.apache.shiro.spring.remoting.SecureRemoteInvocationExecutor">
        <property name="securityManager" ref="securityManager"/>
    </bean>
    -->

</beans>
