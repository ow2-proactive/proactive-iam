buildscript {
    repositories {
        mavenCentral()
        jcenter()
        maven { url 'http://repository.activeeon.com/content/groups/proactive/' }
        maven { url "https://plugins.gradle.org/m2/" }
    }

    dependencies {
        classpath 'org.springframework.boot:spring-boot-gradle-plugin:1.3.3.RELEASE'
        classpath 'org.kt3k.gradle.plugin:coveralls-gradle-plugin:2.7.1'
        classpath "org.sonarsource.scanner.gradle:sonarqube-gradle-plugin:2.2.1"
        classpath "com.diffplug.gradle.spotless:spotless:2.4.0"
        classpath "org.ow2.proactive:coding-rules:1.0"
    }

    dependencies {
        delete "gradle/ext"
        ant.unjar src: configurations.classpath.find { it.name.startsWith("coding-rules") }, dest: 'gradle/ext'
    }
}

plugins {
    id 'eclipse'
    id 'idea'
    id 'jacoco'
    id 'java'
    id 'maven'
    id 'war'
}

apply plugin: 'spring-boot'
apply plugin: 'com.github.kt3k.coveralls'
apply plugin: 'org.sonarqube'
apply from: "$rootDir/gradle/ext/coding-format.gradle"

group = 'org.ow2.proactive'

bootRepackage {
    enabled = true
}

configurations {
    // The following module is excluded to avoid clashes when embedded inside the ProActive Scheduler
    all*.exclude module: 'spring-boot-starter-logging'

    integrationTestCompile.extendsFrom testCompile
    integrationTestRuntime.extendsFrom testRuntime
}

compileJava {
    sourceCompatibility = 1.8
    targetCompatibility = 1.8
}

coveralls {
    sourceDirs = allprojects.sourceSets.main.allSource.srcDirs.flatten()
    jacocoReportPath = "${buildDir}/reports/jacoco/test/jacocoTestReport.xml"
}

ext {
    generatedSrcDir = "$projectDir/src/generated/java"
}

repositories {
    jcenter()
}

sourceSets {
    generated {
        java {
            srcDirs += generatedSrcDir
        }
    }

    main {
        java {
            srcDirs += generatedSrcDir
        }
    }

    integrationTest {
        java.srcDir file('src/integration-test/java')
        resources.srcDir file('src/integration-test/resources')

        compileClasspath = sourceSets.main.output + configurations.integrationTestCompile
        runtimeClasspath = output + compileClasspath + configurations.integrationTestRuntime
    }
}

springBoot {
    mainClass = 'org.ow2.proactive.' + packageLastPartName + '.Application'
}

war {
    baseName = projectName
    version = version
}

dependencies {
    compile 'org.projectlombok:lombok:1.16.6'
    compile 'commons-fileupload:commons-fileupload:1.3.1'

    compile 'org.springframework.boot:spring-boot-starter-log4j2:1.3.3.RELEASE'
    compile('org.springframework.boot:spring-boot-starter-web:1.3.3.RELEASE') {
        exclude module: 'spring-boot-starter-tomcat'
        exclude module: 'spring-boot-starter-validation'
    }
    compile 'org.springframework.hateoas:spring-hateoas:0.19.0.RELEASE'

    providedCompile 'org.springframework.boot:spring-boot-starter-tomcat:1.3.3.RELEASE'

    compile 'io.springfox:springfox-spring-web:2.4.0'
    compile 'io.springfox:springfox-swagger2:2.4.0'
    compile 'io.springfox:springfox-swagger-ui:2.4.0'
    compile 'com.google.guava:guava:19.0'

    testCompile 'org.hamcrest:java-hamcrest:2.0.0.0'
    testCompile 'com.google.truth:truth:0.28'
    testCompile 'junit:junit:4.12'
    testCompile 'nl.jqno.equalsverifier:equalsverifier:2.0.2'
    testCompile 'org.mockito:mockito-core:1.10.19'

    testCompile 'com.google.code.gson:gson:2.6.2'
    testCompile 'com.jayway.restassured:rest-assured:2.9.0'
    testCompile 'org.springframework.boot:spring-boot-starter-test:1.3.3.RELEASE'

}

test {

    apply plugin: 'org.sonarqube'
    apply plugin: 'jacoco'

    sonarqube {
        properties {
            property "sonar.projectName", projectName
            property "sonar.projectKey", "$project.group:$projectName"
            property "sonar.sources", "src/main/java"
            property 'sonar.jacoco.reportPath', "${buildDir}/jacoco/testDebug.exec"
            property 'sonar.junit.reportsPath', "${buildDir}/test-results"
        }
    }

    jacoco {
        destinationFile = file("$buildDir/jacoco/jacocoTest.exec")
    }
}

task integrationTest(type: Test) {
    testClassesDir = sourceSets.integrationTest.output.classesDir
    classpath = sourceSets.integrationTest.runtimeClasspath
    classpath += sourceSets.test.runtimeClasspath

    jacoco {
        destinationFile = file("$buildDir/jacoco/jacocoIntegrationTest.exec")
    }

    testLogging {
        events "passed", "skipped", "failed"
    }
}

jacocoTestReport {
    executionData test, integrationTest

    sourceSets project.sourceSets.main

    reports {
        html.enabled = true
        xml.enabled = true
    }
}

clean {
    sourceSets.generated.java.srcDirs.each {
       srcDir -> delete srcDir
    }
}

task wrapper(type: Wrapper) {
    gradleVersion = '2.10'
}

check.dependsOn integrationTest

jacocoTestReport.dependsOn check
tasks.coveralls.dependsOn jacocoTestReport

tasks.withType(Test) {
    reports.html.destination = file("${reporting.baseDir}/${name}")
}

idea {
    module {
        testSourceDirs += file('src/integration-test/java')
        testSourceDirs += file('src/integration-test/resources')

        scopes.TEST.plus += [
                configurations.integrationTestCompile,
                configurations.integrationTestRuntime
        ]
    }
}
