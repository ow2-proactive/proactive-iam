buildscript {
    repositories {
        mavenCentral()
        jcenter()
        maven { url 'http://repository.activeeon.com/content/groups/proactive/' }
        maven { url "https://plugins.gradle.org/m2/" }
        maven { url "http://repo.spring.io/libs-snapshot" }
    }

    dependencies {
        classpath "org.springframework.boot:spring-boot-gradle-plugin:1.4.3.RELEASE"
        classpath 'org.kt3k.gradle.plugin:coveralls-gradle-plugin:2.7.1'
        classpath "org.sonarsource.scanner.gradle:sonarqube-gradle-plugin:2.2.1"
        classpath "com.diffplug.gradle.spotless:spotless:2.4.0"
        classpath "org.ow2.proactive:coding-rules:1.0.0"
        delete "gradle/ext"
        ant.unjar src: configurations.classpath.find { it.name.startsWith("coding-rules") }, dest: 'gradle/ext'
    }
}

plugins {
    id 'eclipse'
    id 'idea'
    id 'java'
    id 'maven'
    id 'war'
}

apply plugin: 'org.sonarqube'
apply from: "$rootDir/gradle/ext/coding-format.gradle"

allprojects {

    apply plugin: 'eclipse'
    apply plugin: 'idea'
    apply plugin: 'jacoco'
    apply plugin: 'com.github.kt3k.coveralls'
    apply plugin: 'java'
    apply plugin: 'maven'
    apply plugin: 'war'

    group = 'org.ow2.proactive'
    version = version

    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8

    defaultTasks 'clean', 'build', 'check'

    repositories {
        if (project.hasProperty('local')) {
            mavenLocal()
        }

        mavenCentral()
        jcenter()
        maven { url 'http://repository.activeeon.com/content/groups/proactive/' }
    }

    uploadArchives {
        repositories {
            mavenDeployer {
                snapshotRepository(url: "http://repository.activeeon.com/content/repositories/snapshots/") {
                    authentication(userName: "${System.getProperty('nexusUsername')}",
                            password: "${System.getProperty('nexusPassword')}")
                }
                repository(url: "http://repository.activeeon.com/content/repositories/releases/") {
                    authentication(userName: "${System.getProperty('nexusUsername')}",
                            password: "${System.getProperty('nexusPassword')}")
                }
            }
        }
    }

    sourceSets {
        integrationTest {
            java.srcDir file('src/integration-test/java')
            resources.srcDir file('src/integration-test/resources')

            compileClasspath = sourceSets.main.output + configurations.integrationTestCompile
            runtimeClasspath = output + compileClasspath + configurations.integrationTestRuntime
        }
    }

    configurations {
        // The following module is excluded to avoid clashes when embedded inside the ProActive Scheduler
        all*.exclude module: 'spring-boot-starter-logging'

        integrationTestCompile.extendsFrom testCompile
        integrationTestRuntime.extendsFrom testRuntime
    }

    dependencies {
        compile 'org.projectlombok:lombok:1.16.12'
        compile 'com.google.guava:guava:19.0'

        testCompile 'org.hamcrest:java-hamcrest:2.0.0.0'
        testCompile 'com.google.truth:truth:0.30'
        testCompile 'junit:junit:4.12'
        testCompile 'nl.jqno.equalsverifier:equalsverifier:2.0.2'
        testCompile 'org.mockito:mockito-core:1.10.19'
    }

    sonarqube {
        properties {
            property "sonar.projectKey", "$project.group:iam"
            property "sonar.projectName", "iam"
            property "sonar.jdbc.driverClassName", "org.postgresql.Driver"
            property "sonar.language", "java"
            property "sonar.sources", "src/main"
            property 'sonar.jacoco.reportPath', "${buildDir}/jacoco/testDebug.exec"
            property 'sonar.junit.reportsPath', "${buildDir}/test-results"
        }
    }

    task integrationTest(type: Test) {
        testClassesDir = sourceSets.integrationTest.output.classesDir
        classpath = sourceSets.integrationTest.runtimeClasspath
        classpath += sourceSets.test.runtimeClasspath
        outputs.upToDateWhen { false }

        testLogging {
            events "passed", "skipped", "failed"
        }
    }

    jacocoTestReport {
        executionData test, integrationTest

        sourceSets project.sourceSets.main

        reports {
            html.enabled = true
            xml.enabled = true
        }
    }

    coveralls {
        sourceDirs = allprojects.sourceSets.main.allSource.srcDirs.flatten()
        jacocoReportPath = "${buildDir}/reports/jacoco/test/jacocoTestReport.xml"
    }

    task wrapper(type: Wrapper) {
        gradleVersion = '2.10'
    }

    check.dependsOn integrationTest
    integrationTest.mustRunAfter test
    jacocoTestReport.dependsOn check
    tasks.coveralls.dependsOn jacocoTestReport

    tasks.withType(Test) {
        reports.html.destination = file("${reporting.baseDir}/${name}")
    }

    idea {
        module {
            testSourceDirs += file('src/integration-test/java')
            testSourceDirs += file('src/integration-test/resources')

            scopes.TEST.plus += [
                    configurations.integrationTestCompile,
                    configurations.integrationTestRuntime
            ]
        }
    }

}
